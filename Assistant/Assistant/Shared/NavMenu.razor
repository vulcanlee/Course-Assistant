@inject QuestionBroadcast QuestionBroadcast
@implements IDisposable
@inject IToastService toastService


<div class="top-row pl-4 navbar navbar-dark">
    <a class="navbar-brand" href="">Assistant</a>
    <button class="navbar-toggler" @onclick="ToggleNavMenu">
        <span class="navbar-toggler-icon"></span>
    </button>
</div>

<div class="@NavMenuCssClass" @onclick="ToggleNavMenu">
    <ul class="nav flex-column">
        <li class="nav-item px-3">
            <NavLink class="nav-link" href="" Match="NavLinkMatch.All">
                <span class="oi oi-home" aria-hidden="true"></span> Home
            </NavLink>
        </li>
        <AuthorizeView Roles="User">
            <Authorized>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="CoursesList">
                        <span class="oi oi-plus" aria-hidden="true"></span> 課程清單
                    </NavLink>
                </li>
            </Authorized>
            <NotAuthorized>
            </NotAuthorized>
        </AuthorizeView>
        <AuthorizeView Roles="Admin">
            <Authorized>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="Courses">
                        <span class="oi oi-list-rich" aria-hidden="true"></span> 課程維護
                    </NavLink>
                </li>
                <li class="nav-item px-3">
                    <NavLink class="nav-link" href="Users">
                        <span class="oi oi-people" aria-hidden="true"></span> 使用者維護
                    </NavLink>
                </li>
            </Authorized>
            <NotAuthorized>
            </NotAuthorized>
        </AuthorizeView>

        <li class="nav-item px-3">
            <NavLink class="nav-link" href="Summary">
                <span class="oi oi-plus" aria-hidden="true"></span> 效能測試結果
            </NavLink>
        </li>
    </ul>
</div>

@code {
    private bool collapseNavMenu = true;

    private string NavMenuCssClass => collapseNavMenu ? "collapse" : null;

    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }

    private void ToggleNavMenu()
    {
        collapseNavMenu = !collapseNavMenu;
    }

    protected override async void OnInitialized()
    {
        await QuestionBroadcast.Unsubscribe(ShowNotification);
        await QuestionBroadcast.Subscribe(ShowNotification);
        await QuestionBroadcast.UnsubscribeConcurrentConnection(ShowConnectionNotification);
        await QuestionBroadcast.SubscribeConcurrentConnection(ShowConnectionNotification);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender == true)
        {
            await QuestionBroadcast.PublishConcurrentConnection();
        }
    }

    void ShowNotification(string msg)
    {
        toastService.ShowWarning(msg, "有新問題提出了");
    }
    async void ShowConnectionNotification(int connections)
    {
        var authState = await authenticationStateTask;
        ClaimsPrincipal claimsPrincipal = authState.User;
        if (claimsPrincipal.HasClaim(x => x.Value == GlobalHelper.AdminRoleName))
        {
            toastService.ShowError($"同時連線數量:{connections}", "同時連線人數回報");
        }
    }
    public async void Dispose()
    {
        await QuestionBroadcast.Unsubscribe(ShowNotification);
        await QuestionBroadcast.UnsubscribeConcurrentConnection(ShowConnectionNotification);
        await QuestionBroadcast.PublishConcurrentConnection();
    }


}
