@page "/"
@inject UserIdentity UserIdentity
@inject QuestionBroadcast QuestionBroadcast
@using System.Threading

<h1>你好</h1>

<div class="text-primary">
    這是一個使用 伺服器端的 Blazor Framework 所開發出來的教育訓練課程輔助應用程式，整個開發過程，僅使用 HTML / C# 來進行開發，開發過程中，完全沒有寫道任何一行 JavaScript 相關的程式碼。
</div>

<div class="text-danger">
    透過這個應用程式的開發，希望能夠解除許多對 Blazor 這套開發工具的疑惑。
</div>

<div>現在共有 @AllMembers 在線上</div>
<button class="btn btn-outline-info" @onclick="ShowMembers">更新線上人數</button>

<br />
<br />

<div>
    現在執行緒 ID : @currentThread
</div>
<div>
    執行緒集區的資訊為 : @threadInformation
</div>

@*<CourseUserData/>*@
@*<CourseData/>*@

@code{
    [CascadingParameter]
    private Task<AuthenticationState> authenticationStateTask { get; set; }
    int AllMembers = 0;
    string currentThread = "";
    string threadInformation = "";
    ThreadPoolInfo threadPoolInfo = new ThreadPoolInfo();

    protected override async Task OnInitializedAsync()
    {
        var authState = await authenticationStateTask;
        var user = authState.User;
        var userId = UserIdentity.GetNameIdentity(user);
        if (user.Identity.IsAuthenticated)
        {
            Console.WriteLine($"{user.Identity.Name} is authenticated.");
        }
        else
        {
            Console.WriteLine("The user is NOT authenticated.");
        }
    }
    async void ShowMembers()
    {
        AllMembers = await QuestionBroadcast.GetAllSubscriber();
        GetThreadInformation();
    }
    void GetThreadInformation()
    {
        threadInformation = GetThreadPoolInfo();
        currentThread = Thread.CurrentThread.ManagedThreadId.ToString();
    }
    string GetThreadPoolInfo(bool breakLine = false)
    {
        var lineSeparate = breakLine ? Environment.NewLine : "";
        DateTime Begin = DateTime.Now;
        QueryThreadPoolInfo(threadPoolInfo);
        DateTime Complete = DateTime.Now;
        return
            $"AW:{threadPoolInfo.WorkerThreadsAvailable} / AIOC:{threadPoolInfo.CompletionPortThreadsAvailable} " + lineSeparate +
            $"MaxW:{threadPoolInfo.WorkerThreadsMax} / MaxIOC:{threadPoolInfo.CompletionPortThreadsMax} " + lineSeparate +
            $"MinW:{threadPoolInfo.WorkerThreadsMin} / MinIOC:{threadPoolInfo.CompletionPortThreadsMin} " + Environment.NewLine;

    }
    void QueryThreadPoolInfo(ThreadPoolInfo threadPoolInfo)
    {
        ThreadPool.GetAvailableThreads(out threadPoolInfo.WorkerThreadsAvailable, out threadPoolInfo.CompletionPortThreadsAvailable);
        ThreadPool.GetMaxThreads(out threadPoolInfo.WorkerThreadsMax, out threadPoolInfo.CompletionPortThreadsMax);
        ThreadPool.GetMinThreads(out threadPoolInfo.WorkerThreadsMin, out threadPoolInfo.CompletionPortThreadsMin);
        DateTime Complete = DateTime.Now;
        return;
    }
    class ThreadPoolInfo
    {
        public int WorkerThreadsAvailable;
        public int CompletionPortThreadsAvailable;
        public int WorkerThreadsMax;
        public int CompletionPortThreadsMax;
        public int WorkerThreadsMin;
        public int CompletionPortThreadsMin;
    }
}
