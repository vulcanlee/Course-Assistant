@page "/Courses"
@inject ICourseService CourseService
@inject IModalService Modal
@inject IToastService toastService
@attribute [Authorize(Roles = "Admin")]

<h3>課程</h3>

<div class="d-flex justify-content-between">
    <div>
        <input type="button" class="btn btn-primary" value="新增"
               @onclick="Add" />
    </div>
    <div>
        <Pager Result=@pagedResult PageChanged=@PagerPageChanged />
    </div>
</div>

<table class="table">
    <thead>
        <tr>
            <th>代碼</th>
            <th>課程名稱</th>
            <th>說明</th>
            <th>設定</th>
            <th>功能</th>
        </tr>
    </thead>
    <tbody>
        @foreach (var RecItem in courseUsers)
        {
            <tr>
                <td>@RecItem.CourseCode</td>
                <td>@RecItem.Name</td>
                <td>@RecItem.Description</td>
                <td>
                    <input type="button" class="btn btn-outline-primary" value="使用者 @RecItem.CourseCourseUsers.Count"
                           @onclick="()=>AssignUser(RecItem)" />
                </td>
                <td>
                    <input type="button" class="btn btn-primary" value="修改"
                           @onclick="()=>Update(RecItem)" />
                    <input type="button" class="btn btn-danger" value="刪除"
                           @onclick="()=>Delete(RecItem)" />
                </td>
            </tr>
        }
    </tbody>
</table>

@code {
    PagedResult<Course> pagedResult = new PagedResult<Course>();
    int currentPage = 1;
    int pageSize = 5;

    List<Course> courseUsers = new List<Course>();
    Course currentRecord;
    CourseRecordModel courseRecordModel;
    protected override async Task OnInitializedAsync()
    {
        await Reload();
    }

    async Task Reload()
    {
        //courseUsers = await CourseUserService.RetriveAsync();
        pagedResult = await CourseService.GetPagedAsync(currentPage, pageSize);
        courseUsers = pagedResult.Results.ToList();
    }
    async void PagerPageChanged(int page)
    {
        currentPage = page;
        await Reload();
        StateHasChanged();
    }

    void Add()
    {
        courseRecordModel = new CourseRecordModel()
        {
            Id = 0,
            Name = "",
            CourseCode = "",
            Description = ""
        };
        var parameters = new ModalParameters();
        // 宣告要傳遞給刪除對話窗的參數
        parameters.Add("RecordItem", courseRecordModel);

        // 綁定使用者關閉對話窗的觸發事件
        Modal.OnClose += OnUpdateModalClosed;
        // 顯示這個刪除對話窗
        Modal.Show<CourseItem>("新增紀錄", parameters);
    }

    void Update(Course courseUser)
    {
        currentRecord = courseUser;
        courseRecordModel = new CourseRecordModel()
        {
            Id = currentRecord.Id,
            Name = currentRecord.Name,
            CourseCode = currentRecord.CourseCode,
            Description = currentRecord.Description,
        };
        var parameters = new ModalParameters();
        // 宣告要傳遞給刪除對話窗的參數
        parameters.Add("RecordItem", courseRecordModel);

        // 綁定使用者關閉對話窗的觸發事件
        Modal.OnClose += OnUpdateModalClosed;
        // 顯示這個刪除對話窗
        Modal.Show<CourseItem>("修改紀錄", parameters);
    }
    // 修改紀錄對話窗的事件被觸發所要執行的委派方法
    async void OnUpdateModalClosed(ModalResult modalResult)
    {
        //解除該對話窗所綁定的事件
        Modal.OnClose -= OnUpdateModalClosed;
        // 檢查使用者是否有點選確認按鈕
        if (modalResult.Cancelled)
        {
            toastService.ShowInfo("取消修改紀錄", "通知");
        }
        else
        {
            // 若使用者點選了確定按鈕
            if (courseRecordModel.Id == 0)
            {
                Course courseUser = new Course()
                {
                    Name = courseRecordModel.Name,
                    CourseCode = courseRecordModel.CourseCode,
                    Description = courseRecordModel.Description,
                    Created = DateTime.Now
                };
                await CourseService.CreateAsync(courseUser);
                toastService.ShowSuccess("紀錄已經新增", "通知");
            }
            else
            {
                currentRecord.Name = courseRecordModel.Name;
                currentRecord.CourseCode = courseRecordModel.CourseCode;
                currentRecord.Description = courseRecordModel.Description;
                await CourseService.UpdateAsync(currentRecord.Id, currentRecord);
                toastService.ShowSuccess("紀錄已經更新", "通知");
            }
            await Reload();
            toastService.ShowInfo("重新更新資料", "通知");
            StateHasChanged();
        }
    }
    void Delete(Course course)
    {
        currentRecord = course;
        var parameters = new ModalParameters();
        // 宣告要傳遞給刪除對話窗的參數
        parameters.Add("RecordTitleName", course.Name);

        // 綁定使用者關閉對話窗的觸發事件
        Modal.OnClose += OnDeleteModalClosed;
        // 顯示這個刪除對話窗
        Modal.Show<ConfirmDelete>("刪除警告", parameters);
    }
    // 刪除對話窗的事件被觸發所要執行的委派方法
    async void OnDeleteModalClosed(ModalResult modalResult)
    {
        //解除該對話窗所綁定的事件
        Modal.OnClose -= OnDeleteModalClosed;
        // 檢查使用者是否有點選確認按鈕
        if (modalResult.Cancelled)
        {
            toastService.ShowInfo("取消刪除", "通知");
        }
        else
        {
            // 若使用者點選了確定按鈕
            await CourseService.DeleteAsync(currentRecord.Id);
            toastService.ShowSuccess("紀錄已經刪除", "通知");
            await Reload();
            StateHasChanged();
        }
    }
    void AssignUser(Course course)
    {
        currentRecord = course;
        var parameters = new ModalParameters();
        // 宣告要傳遞給刪除對話窗的參數
        parameters.Add("RecordItem", currentRecord);

        // 綁定使用者關閉對話窗的觸發事件
        Modal.OnClose += OnAsignUserModalClosed;
        // 顯示這個刪除對話窗
        Modal.Show<CourseUserAssign>("設定使用者", parameters);
    }
    // 更新使用者設定對話窗的事件被觸發所要執行的委派方法
    async void OnAsignUserModalClosed(ModalResult modalResult)
    {
        //解除該對話窗所綁定的事件
        Modal.OnClose -= OnAsignUserModalClosed;
        // 檢查使用者是否有點選確認按鈕
        if (modalResult.Cancelled)
        {
            toastService.ShowInfo("取消使用者設定", "通知");
        }
        else
        {
            // 若使用者點選了確定按鈕
            await CourseService.UpdateAsync(currentRecord.Id, currentRecord);
            toastService.ShowSuccess("使用者設定完成", "通知");
            await Reload();
            StateHasChanged();
        }
    }
}
